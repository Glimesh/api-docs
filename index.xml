<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on API-Docs</title><link>https://glimesh.github.io/api-docs/</link><description>Recent content in Home on API-Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://glimesh.github.io/api-docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://glimesh.github.io/api-docs/docs/live-updates/channels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/live-updates/channels/</guid><description>Channel Changes # Using graphQL subscriptions we can listen for changes to a channel without making repeated queries! Before starting this tutorial you should understand basic graphQL and have a method of authentication. Completing our websocket tutorial will also be helpful.
Need authentication? Start with access tokens
Websocket tutorial can be found here
Selecting a Channel # Before we can subscribe to a user we need a channel ID. This will specify which channel we are wanting to connect to.</description></item><item><title>Connecting to Chat</title><link>https://glimesh.github.io/api-docs/docs/chat/websockets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/chat/websockets/</guid><description>Chat WebSockets # Glimesh uses WebSockets to allow for constant communication between you and the chat API. To connect to a chat you will need an access token or a client ID. Keep in mind that using a client ID will keep you in read-only mode for chat environments. The access token must have the chat scope to post messages.
If you are testing you can use client credentials to get an access token.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/live-updates/followers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/live-updates/followers/</guid><description>Follower Alerts # This is a tutorial for follow alerts. This guide assumes you have a client ID or an access token from a user. You should also have a websocket connection open from this tutorial. Having basic GraphQL knowledge would also be helpful.
New to GraphQL? This tutorial explains the basics. https://graphql.org/learn/schema/
Building the Subscription # Follow alerts are made of a standard subscription. The streamer ID of the channel that you want to have alerts for is required.</description></item><item><title>Sending Messages</title><link>https://glimesh.github.io/api-docs/docs/chat/mutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/chat/mutations/</guid><description>Sending Messages # This tutorial will enable you to send and receive chat messages using the Glimesh API.
This tutorial is for the HTTP API. This is not a websocket tutorial. If you are looking to build a chatbot or other program that needs a constant connection view this tutorial.
To connect to a chat you will need an access token or a client ID. Keep in mind that using a client ID will keep you in read-only mode for chat environments.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/contributing/</guid><description>Contributing # Thanks for wanting to contribute to the api-docs! We are grateful for your help.
Contributing to the API Docs. # Anyone can contribute to the docs. We only ask that you follow a few guidelines when contributing.
Follow the file structure. Each topic (or sub-topic) has language specific folders and a basic guide. Inside each language folder there should be a tutorial and a code file if applicable.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/live-updates/subscribers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/live-updates/subscribers/</guid><description>Subscriber Alerts # The Glimesh API does not have a live update event for channel subscribers. However, you can listen for the subscriber chatmessage to be notified when someone subscribes to a channel. This requires that you have a working websocket connection.
Listening for Subs # Simply ask Glimesh for the added property in a chatmessage subscription. This is a deprecated property and will be replaced in the future.</description></item><item><title>Tokens (Message Parts)</title><link>https://glimesh.github.io/api-docs/docs/chat/chat-tokens/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/chat/chat-tokens/</guid><description>Chat Tokens # Chat tokens are a different way to handle messages sent from chat. A normal message is just a simple string. A chat token is an array of data that shows you all sorts of information about the message and what it contains.
This is a continuation of the websocket tutorial. If you have not already completed the tutorial you can do so here. A chat connection is required for this tutorial.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/chat/moderation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/chat/moderation/</guid><description>Chat Moderation # Using the Glimesh API we can use mod features such as timeouts and bans. These are critical for chatbots and other services. Before starting this tutorial you should have a working connection to the API and understand basic GraphQL.
New to GraphQL? This tutorial explains the basics. https://graphql.org/learn/schema/
If you are looking for live updates related to moderation you can apply the queries in this tutorial to our Live Updates tutorial here.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/dev-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/dev-app/</guid><description>Developer Application # Although making an application is easy, developers new to OAuth may find some of it confusing. This tutorial will explain the basics of what information is asked for and what is it used for.
Ready to make your application? Start here
Name # The name of your project is a user friendly name for your application. Both Glimesh and your users will see this when they authenticate with your app.</description></item><item><title>Live Updates Explained</title><link>https://glimesh.github.io/api-docs/docs/live-updates/explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/live-updates/explanation/</guid><description>Live Updates # Live updates allow you to listen for changes through the API. Glimesh will notify you when a requested event occurs.
Live updates are sent via a websocket connection. You can set that up here.
Types of Events # There are 3 events you can subscribe to. Each works the same way.
Channels # Channel events occur when a top level field changes. You can listen for the status (live/not-live), title, and any other information.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/clientcredentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/clientcredentials/</guid><description>Client Credentials (Access Token) # An access token can be used to query the Glimesh API on behalf of a user. Normally you have to get a token from a user. Client credentials allows us to generate an access token for our own account to act as an authenticated user. This is frequently used for testing purposes.
Requesting A Token # Before requesting a token you must have a developer application.</description></item><item><title>PKCE</title><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/pkceauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/pkceauth/</guid><description>PKCE Authentication Flow # PKCE builds upon authorization flow. PKCE is commonly used for mobile and frontend code where your source code (namely client ID) is accessible to your users. PKCE auth does not require a client secret.
Glimesh closely follows the RFC spec which can be found here.
Verifier and Challenge # First we need to generate a code verifier and a code challenge to use in the authorization request.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/api-explorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/api-explorer/</guid><description>API Explorer # Insomnia is a GraphQL explorer. It allows you to make queries without needing a dev environment. It is the recommended way to learn the API and is helpful if you are new to programming.
We have a JSON file with a collection to handle auth and make common requests in Insomnia. You can download it here
Getting Started # First we need to download Insomnia. They have a free tier which is more than enough for our purposes.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/migration/</guid><description>API Migration # Glimesh has started migrated to a new API because of major changes in the way result data is returned from the API. We&amp;rsquo;ve added pagination to all queries that return lists to improve performance on the app, and renamed several fields for consistency.
In addition, we are in the process of migrating to a new OAuth 2.0 provider which adds additional features, but may require some changes for your application.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/pagination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/pagination/</guid><description>API Pagination # Some fields in the API are paginated. We have to sort through the pages to get the data we requested. Glimesh follows the GraphQL pagination spec.
GraphQL pagination can be found here
Connection, Edges, and Nodes # Pagination is used when the data requested is too large to send to the user. Take the below query as an example. This query would return the ID of all the users on the site.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/voyager/</guid><description>Voyager is an interactive GraphQL API explorer. It allows you to view all the data in our API. Click and drag to move around the explorer. Click on a field to view its properties. Scoll to adjust zoom.
Loading...</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/accesstoken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/accesstoken/</guid><description>Access Tokens # An access token can be used to query the Glimesh API on behalf of a user. You can also get info about the user that the token belongs to.
This guide is for getting a token from a real user. If you are just testing or don&amp;rsquo;t want to setup authentication yet you can use client credentials
Requesting A Token # Before requesting a token you must have a developer application.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/authentication/auth-explained/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/auth-explained/</guid><description>Authentication Explanation # Glimesh requires a form of authentication to use the API. Every query (or endpoint) must have authentication passed to it to receive your information. This doc explains what methods of authentication exist and how to get them.
Glimesh follows the OAuth 2.0 spec which can be found here
Methods of Authentication # If you want to use the API you must have a developer application. This is a small document that contains info about your product.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/authentication/refreshtoken/refreshtoken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/refreshtoken/refreshtoken/</guid><description>Refresh Tokens # A refresh token allows you to get a new access token without having your user authenticate again. It is a standard part of OAuth 2.
Looking for authentication flow? Start with access tokens
Refreshing A Token # Refresh tokens are sent when you request an access token. You can pull them from the data that Glimesh sends you.
{ access_token: &amp;#39;qwertyuiopo1234567890&amp;#39;, created_at: &amp;#39;2020-12-14T15:15:29&amp;#39;, expires_in: 21600, refresh_token: &amp;#39;qwertyuiop0987654321&amp;#39;, scope: &amp;#39;public email chat streamkey&amp;#39;, token_type: &amp;#39;bearer&amp;#39; } You can refresh a token at any time.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/chat/projects/sitewidesubscription/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/chat/projects/sitewidesubscription/</guid><description>Site Wide Chat Messages # The Glimesh API allows you to subscribe to any channel to listen for chat messages. There is no limit to the amount of channels that you can listen to. In this project we will listen for every chat message from every user across the entire site.
Before starting you should fully understand the WebSocket Tutorial.
Starting Up # First we need to open a websocket connection to Glimesh.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/chat/projects/typescriptchatbot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/chat/projects/typescriptchatbot/</guid><description>Creating a Chatbot with Typescript # This tutorial will show how to make a basic chatbot for Glimesh. You should have some experience in Javascript or Typescript. This tutorial is focused towards beginners so as long as you have some programming experience you will be alright. You will need the below items.
NodeJS (Recent version, 12+) Code Editor (VSCode works great with this project) Glimesh account with a channel and a Dev App The finished project can be found on Github here.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/developerresources/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/developerresources/libraries/</guid><description>Community Libraries # This is a list of community created libraries to help communicate with the API. All of these libraries are community made and not official in any way.
NodeJS/TypeScript # https://www.npmjs.com/package/glimesh-chat
A library for connecting to chat and using moderator actions such as timeouts and bans.
An access token is required to use this module.
Created by Innectic
C# # https://www.nuget.org/packages/StreamingClientLibrary.Glimesh/
A library for connecting to the Glimesh chat API in C#.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/developerresources/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/developerresources/tools/</guid><description>Community Libraries # This is a list of tools to help develop apps with the API. None of these are required but they may help you during development.
Insomnia # https://insomnia.rest
A tool for working with GraphQL APIs. This allows you to view all of the data and make queries. We have a tutorial for using it here.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/api/</guid><description>API Requests # This document shows common API requests that may be of use. To see the most recent version of the API use an API explorer or view Voyager
Remove any comments before sending to Glimesh.
Category List # Returns a list of all the categories. Query query { categories { id, # ID of the category name, # Name of the category slug, # Slug of the category (lowercase name) tagName, # The parent and current category: Art &amp;gt; Digital parent { # The parent category.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/apireference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/apireference/</guid><description>Remove any comments before sending to Glimesh.
Category List # Returns a list of all the categories. Query query { categories { id, # ID of the category name, # Name of the category slug, # Slug of the category (lowercase name) tagName, # The parent and current category: Art &amp;gt; Digital parent { # The parent category. Null if no parent exists. name # all of the above fields are available } } } Response This shows two of the categories returned.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/channel/</guid><description>Channel Subscription # Shows all the properties of the channel object. Note that for nested objects only one propery is shown.
subscription { channel(id: 6) { bans(last: 3) { edges { node { reason } } } blockLinks category { name } chatBgUrl chatRulesHtml chatMessages(last: 3) { edges { node { message } } } chatRulesMd disableHyperlinks hmacKey id inaccessible insertedAt language matureContent minimumAccountAge moderationLogs { edges { node { action } } } moderators { edges { node { canBan } } } posterUrl requireConfirmedEmail showOnHomepage showRecentChatMessagesOnly status stream { id } streamKey streamer { username } streams { edges { node { countViewers } } } subcategory { name } tags { name } title updatedAt } } A full list of every property can be found in a GraphQL editor.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/channelreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/channelreference/</guid><description>Shows all the properties of the channel object. Note that for nested objects only one propery is shown.
subscription { channel(id: 6) { bans(last: 3) { edges { node { reason } } } blockLinks category { name } chatBgUrl chatRulesHtml chatMessages(last: 3) { edges { node { message } } } chatRulesMd disableHyperlinks hmacKey id inaccessible insertedAt language matureContent minimumAccountAge moderationLogs { edges { node { action } } } moderators { edges { node { canBan } } } posterUrl requireConfirmedEmail showOnHomepage showRecentChatMessagesOnly status stream { id } streamKey streamer { username } streams { edges { node { countViewers } } } subcategory { name } tags { name } title updatedAt } }</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chat/</guid><description> Chat # Shows all of the fields in the chatMessage object.
chatMessage { id, insertedAt, message, updatedAt, isSubscriptionMessage, isFollowedMessage, channel { // Channel data }, metadata { // Metadata about the user at the time of the message (is sub/mod/founder/etc) } user { // User data } }</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chatparts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chatparts/</guid><description>Chat Parts # All the possbile data to query from a chat part.
subscription{ chatMessage(channelId:6) { message, user { id }, tokens { text, type, ...on EmoteToken { src, text, type, }, ...on TextToken { text, type }, ...on UrlToken { text, type, url } } } } A possible response. (Dependent on query and message)
[ null, null, &amp;#34;__absinthe__:doc:-576460752302054414:1C57C19163D4D59F61626243BCCA79AB4E50D5C4C2BD8BDA0DDCE83517B20C16&amp;#34;, &amp;#34;subscription:data&amp;#34;, { &amp;#34;result&amp;#34;:{ &amp;#34;data&amp;#34;:{ &amp;#34;chatMessage&amp;#34;:{ &amp;#34;tokens&amp;#34;:[ { &amp;#34;text&amp;#34;:&amp;#34;Hello Glimesh Devs &amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;text&amp;#34; }, { &amp;#34;src&amp;#34;:&amp;#34;/emotes/svg/glimsmile.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chatpartsreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chatpartsreference/</guid><description>All the possbile data to query from a chat part.
subscription{ chatMessage(channelId:6) { message, user { id }, tokens { text, type, ...on EmoteToken { src, text, type, }, ...on TextToken { text, type }, ...on UrlToken { text, type, url } } } } A possible response. (Dependent on query and message)
[ null, null, &amp;#34;__absinthe__:doc:-576460752302054414:1C57C19163D4D59F61626243BCCA79AB4E50D5C4C2BD8BDA0DDCE83517B20C16&amp;#34;, &amp;#34;subscription:data&amp;#34;, { &amp;#34;result&amp;#34;:{ &amp;#34;data&amp;#34;:{ &amp;#34;chatMessage&amp;#34;:{ &amp;#34;tokens&amp;#34;:[ { &amp;#34;text&amp;#34;:&amp;#34;Hello Glimesh Devs &amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;text&amp;#34; }, { &amp;#34;src&amp;#34;:&amp;#34;/emotes/svg/glimsmile.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chatreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chatreference/</guid><description>Shows all of the fields in the chatMessage object.
chatMessage { id, insertedAt, message, updatedAt, isSubscriptionMessage, isFollowedMessage, channel { // Channel data }, metadata { // Metadata about the user at the time of the message (is sub/mod/founder/etc) } user { // User data } }</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/mod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/mod/</guid><description>Mod Reference # Shows all the queries related to moderation. Note that for nested properties only one property is shown.
Short and long timeouts have the same properties.
mutation { shortTimeoutUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Banning and unbanning a user have the same properties.
mutation { banUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Deletes a message.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/modreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/modreference/</guid><description>Shows all the queries related to moderation. Note that for nested properties only one property is shown.
Short and long timeouts have the same properties.
mutation { shortTimeoutUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Banning and unbanning a user have the same properties.
mutation { banUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Deletes a message.
mutation { deleteChatMessage(channelId:6, messageId: 999) { action, channel {id}, insertedAt, moderator { displayname }, updatedAt, user { displayname } } } Shows all of the properties for a moderation log.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/scopes/</guid><description>Scopes # Scopes are permissions that a developer application requests from a client. The client must approve all of the scopes that you request. You should only request scopes that you plan to use. Below documents all of the available scopes.
public: Get public information about the user and other users on Glimesh. email: View the email of the user. chat: View and speak in a chatroom. stream View the streamkey of the user.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/scopesreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/scopesreference/</guid><description> public: Get public information about the user and other users on Glimesh. email: View the email of the user. chat: View and speak in a chatroom. stream View the streamkey of the user. follow Follow and unfollow on behalf of the user. stream_info Change the title on behalf of the channel. (Will be expanded to cover more fields)</description></item><item><title>Generic Query</title><link>https://glimesh.github.io/api-docs/docs/api/query-api/basic-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/query-api/basic-query/</guid><description>Glimesh API Requests # This is a basic tutorial for communicating with the Glimesh API. This guide assumes you have a client ID or an access token from a user. Having basic GraphQL knowledge would also be helpful.
New to GraphQL? This tutorial explains the basics. https://graphql.org/learn/schema/
Authentication # All requests made to Glimesh must contain the proper authentication. The authentication value should be included as a header of the request.</description></item><item><title>Glimesh IDs</title><link>https://glimesh.github.io/api-docs/docs/api/glimesh-ids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/glimesh-ids/</guid><description>IDs # IDs are a unique identifier for data in the API. Each item of the same type will have its own ID. This can be used to separate it from other items. An ID will never change unlike other unique fields (username). IDs are auto-incremented which means that the higher the ID the newer the item is.
If you are confused about which ID to use simply look at what the query requires.</description></item><item><title>NodeJS Access Token</title><link>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/nodejs/node-access-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/authentication/accesstoken/nodejs/node-access-token/</guid><description>Getting User Tokens With NodeJS # This is a basic tutorial for getting an auth token from a user using Oauth with NodeJS. This guide assumes you know basic JS and understand the workings of Oauth 2.
Need a refresh? This tutorial explains the basics of Oauth 2 https://darutk.medium.com/the-simplest-guide-to-oauth-2-0-8c71bd9a15bb
Creating the Project # We need to create a basic project. In your terminal type:
npm init -y
This will create a project.</description></item><item><title>NodeJS Query</title><link>https://glimesh.github.io/api-docs/docs/api/query-api/nodejs/node-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/query-api/nodejs/node-query/</guid><description>Glimesh API Requests With NodeJS # This is a basic tutorial for communicating with the Glimesh API using NodeJS. This guide assumes you know basic JS and have an access token from a user. You can use a client ID if you do not yet have a token. Having basic GraphQL knowledge would also be helpful.
Need a refresh? This tutorial explains the basics of graphql. https://graphql.org/learn/schema/
Creating the Project # We need to create a basic project.</description></item><item><title>Update Stream Info</title><link>https://glimesh.github.io/api-docs/docs/api/stream/updatestreaminfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/stream/updatestreaminfo/</guid><description>Update Stream Info # Using the new stream_info scope we can modify the title of a stream using the Glimesh API. While this scope currently contains 1 mutation, it will be expanded to cover the rest of the stream info fields.
Before beginning this tutorial you should have a working dev environment and understand the basics of the API.
Getting Permission # This mutation requires the stream_info scope. Any OAuth flow that uses an access token is valid for this query.</description></item></channel></rss>