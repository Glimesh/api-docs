<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API-Docs</title><link>https://glimesh.github.io/api-docs/docs/api/</link><description>Recent content on API-Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://glimesh.github.io/api-docs/docs/api/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://glimesh.github.io/api-docs/docs/api/api-explorer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/api-explorer/</guid><description>API Explorer # Insomnia is a GraphQL explorer. It allows you to make queries without needing a dev environment. It is the recommended way to learn the API and is helpful if you are new to programming.
We have a JSON file with a collection to handle auth and make common requests in Insomnia. You can download it here
Getting Started # First we need to download Insomnia. They have a free tier which is more than enough for our purposes.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/migration/</guid><description>API Migration # Glimesh has started migrated to a new API because of major changes in the way result data is returned from the API. We&amp;rsquo;ve added pagination to all queries that return lists to improve performance on the app, and renamed several fields for consistency.
In addition, we are in the process of migrating to a new OAuth 2.0 provider which adds additional features, but may require some changes for your application.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/pagination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/pagination/</guid><description>API Pagination # Some fields in the API are paginated. We have to sort through the pages to get the data we requested. Glimesh follows the GraphQL pagination spec.
GraphQL pagination can be found here
Connection, Edges, and Nodes # Pagination is used when the data requested is too large to send to the user. Take the below query as an example. This query would return the ID of all the users on the site.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/api/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/voyager/</guid><description>Voyager is an interactive GraphQL API explorer. It allows you to view all the data in our API. Click and drag to move around the explorer. Click on a field to view its properties. Scroll to adjust zoom.
Loading...</description></item><item><title>Glimesh IDs</title><link>https://glimesh.github.io/api-docs/docs/api/glimesh-ids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/api/glimesh-ids/</guid><description>IDs # IDs are a unique identifier for data in the API. Each item of the same type will have its own ID. This can be used to separate it from other items. An ID will never change unlike other unique fields (username). IDs are auto-incremented which means that the higher the ID the newer the item is.
If you are confused about which ID to use simply look at what the query requires.</description></item></channel></rss>