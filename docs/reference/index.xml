<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API-Docs</title><link>https://glimesh.github.io/api-docs/docs/reference/</link><description>Recent content on API-Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://glimesh.github.io/api-docs/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/api/</guid><description>API Requests # This document shows common API requests that may be of use. To see the most recent version of the API use an API explorer or view Voyager
Remove any comments before sending to Glimesh.
Category List # Returns a list of all the categories. Query query { categories { id, # ID of the category name, # Name of the category slug, # Slug of the category (lowercase name) tagName, # The parent and current category: Art &amp;gt; Digital parent { # The parent category.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/apireference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/apireference/</guid><description>Remove any comments before sending to Glimesh.
Category List # Returns a list of all the categories. Query query { categories { id, # ID of the category name, # Name of the category slug, # Slug of the category (lowercase name) tagName, # The parent and current category: Art &amp;gt; Digital parent { # The parent category. Null if no parent exists. name # all of the above fields are available } } } Response This shows two of the categories returned.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/channel/</guid><description>Channel Subscription # Shows all the properties of the channel object. Note that for nested objects only one propery is shown.
subscription { channel(id: 6) { bans(last: 3) { edges { node { reason } } } blockLinks category { name } chatBgUrl chatRulesHtml chatMessages(last: 3) { edges { node { message } } } chatRulesMd disableHyperlinks hmacKey id inaccessible insertedAt language matureContent minimumAccountAge moderationLogs { edges { node { action } } } moderators { edges { node { canBan } } } posterUrl requireConfirmedEmail showOnHomepage showRecentChatMessagesOnly status stream { id } streamKey streamer { username } streams { edges { node { countViewers } } } subcategory { name } tags { name } title updatedAt } } A full list of every property can be found in a GraphQL editor.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/channelreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/channelreference/</guid><description>Shows all the properties of the channel object. Note that for nested objects only one propery is shown.
subscription { channel(id: 6) { bans(last: 3) { edges { node { reason } } } blockLinks category { name } chatBgUrl chatRulesHtml chatMessages(last: 3) { edges { node { message } } } chatRulesMd disableHyperlinks hmacKey id inaccessible insertedAt language matureContent minimumAccountAge moderationLogs { edges { node { action } } } moderators { edges { node { canBan } } } posterUrl requireConfirmedEmail showOnHomepage showRecentChatMessagesOnly status stream { id } streamKey streamer { username } streams { edges { node { countViewers } } } subcategory { name } tags { name } title updatedAt } }</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chat/</guid><description> Chat # Shows all of the fields in the chatMessage object.
chatMessage { id, insertedAt, message, updatedAt, isSubscriptionMessage, isFollowedMessage, channel { // Channel data }, metadata { // Metadata about the user at the time of the message (is sub/mod/founder/etc) } user { // User data } }</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chatparts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chatparts/</guid><description>Chat Parts # All the possbile data to query from a chat part.
subscription{ chatMessage(channelId:6) { message, user { id }, tokens { text, type, ...on EmoteToken { src, text, type, }, ...on TextToken { text, type }, ...on UrlToken { text, type, url } } } } A possible response. (Dependent on query and message)
[ null, null, &amp;#34;__absinthe__:doc:-576460752302054414:1C57C19163D4D59F61626243BCCA79AB4E50D5C4C2BD8BDA0DDCE83517B20C16&amp;#34;, &amp;#34;subscription:data&amp;#34;, { &amp;#34;result&amp;#34;:{ &amp;#34;data&amp;#34;:{ &amp;#34;chatMessage&amp;#34;:{ &amp;#34;tokens&amp;#34;:[ { &amp;#34;text&amp;#34;:&amp;#34;Hello Glimesh Devs &amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;text&amp;#34; }, { &amp;#34;src&amp;#34;:&amp;#34;/emotes/svg/glimsmile.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chatpartsreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chatpartsreference/</guid><description>All the possbile data to query from a chat part.
subscription{ chatMessage(channelId:6) { message, user { id }, tokens { text, type, ...on EmoteToken { src, text, type, }, ...on TextToken { text, type }, ...on UrlToken { text, type, url } } } } A possible response. (Dependent on query and message)
[ null, null, &amp;#34;__absinthe__:doc:-576460752302054414:1C57C19163D4D59F61626243BCCA79AB4E50D5C4C2BD8BDA0DDCE83517B20C16&amp;#34;, &amp;#34;subscription:data&amp;#34;, { &amp;#34;result&amp;#34;:{ &amp;#34;data&amp;#34;:{ &amp;#34;chatMessage&amp;#34;:{ &amp;#34;tokens&amp;#34;:[ { &amp;#34;text&amp;#34;:&amp;#34;Hello Glimesh Devs &amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;text&amp;#34; }, { &amp;#34;src&amp;#34;:&amp;#34;/emotes/svg/glimsmile.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/chatreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/chatreference/</guid><description>Shows all of the fields in the chatMessage object.
chatMessage { id, insertedAt, message, updatedAt, isSubscriptionMessage, isFollowedMessage, channel { // Channel data }, metadata { // Metadata about the user at the time of the message (is sub/mod/founder/etc) } user { // User data } }</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/mod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/mod/</guid><description>Mod Reference # Shows all the queries related to moderation. Note that for nested properties only one property is shown.
Short and long timeouts have the same properties.
mutation { shortTimeoutUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Banning and unbanning a user have the same properties.
mutation { banUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Deletes a message.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/modreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/modreference/</guid><description>Shows all the queries related to moderation. Note that for nested properties only one property is shown.
Short and long timeouts have the same properties.
mutation { shortTimeoutUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Banning and unbanning a user have the same properties.
mutation { banUser(channelId:6, userId:201) { action, channel {id}, insertedAt, moderator {displayname}, updatedAt, user {displayname} } } Deletes a message.
mutation { deleteChatMessage(channelId:6, messageId: 999) { action, channel {id}, insertedAt, moderator { displayname }, updatedAt, user { displayname } } } Shows all of the properties for a moderation log.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/scopes/</guid><description>Scopes # Scopes are permissions that a developer application requests from a client. The client must approve all of the scopes that you request. You should only request scopes that you plan to use. Below documents all of the available scopes.
public: Get public information about the user and other users on Glimesh. email: View the email of the user. chat: View and speak in a chatroom. streamkey View the streamkey of the user.</description></item><item><title/><link>https://glimesh.github.io/api-docs/docs/reference/scopesreference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://glimesh.github.io/api-docs/docs/reference/scopesreference/</guid><description> public: Get public information about the user and other users on Glimesh. email: View the email of the user. chat: View and speak in a chatroom. streamkey View the streamkey of the user. follow Follow and unfollow on behalf of the user. stream_info Change the title on behalf of the channel. (Will be expanded to cover more fields)</description></item></channel></rss>